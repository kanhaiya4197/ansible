---

- name: Copy the correct resolv.conf file to the host
  copy:
    src: "files/{{ Ubuntu_Resolv_conf }}"
    dest: /run/systemd/resolve/stub-resolv.conf
    owner: systemd-resolve
    group: systemd-resolve
    mode: 644
  when: ansible_os_family == 'Debian'

- name: Resynchronize the package index files
  shell: apt-get update
  ignore_errors: yes
  when: ansible_os_family == 'Debian'

# Create the appropriate tomcatx group and user if it does not already exist.

- name: "Ensure {{ playbookname }} group exists, if not create it"
  group:
    name: "{{ playbookname }}"
    state: present

- name: "Ensure the {{ playbookname }} user exists"
  user:
    name: "{{ playbookname }}"
    shell: /bin/nologin
    group: "{{ playbookname }}"
    groups: "{{ playbookname }}"
    append: yes
    home: "/var/lib/{{ playbookname }}"
    state: present

- name: Create the java bin symbolic link directory
  file:
    path: /usr/lib/jvm/jre/bin
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    mode: '0755'
    state: directory

- name: Create the java lib symbolic link directory
  file:
    path: /usr/lib/jvm/jre/lib
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    mode: '0755'
    state: directory

- name: "Ensure the /var/lib/{{ playbookname }} directory exists"
  file:
    path: "{{ playbookname }}"
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    mode: '0755'
    state: directory

- name: "Ensure the /var/log/service directory exists"
  file:
    path: "/var/log/service"
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    state: directory
    mode: 0775

# Install some preliminary packages required by RedHat for the Tomcat installation.

- name: Install preliminary packages on RedHat
  block:

  - name: Installing the apr-devel package
    yum:
      name: apr-devel 
      state: present

  - name: Installing the openssl package
    yum:
      name: openssl-devel
      state: present

  when: ansible_os_family == 'RedHat' and playbookname == 'tomcat9'

# The next block of plays concentrates on preliminaries for installing Tomcat8 onto Ubuntu servers.

- name: Install java and Tomcat8 on Ubuntu
  block:

  - name: Ensure the system can use the HTTPS transport for APT.
    stat:
      path: /usr/lib/apt/methods/https
    register: apt_https_transport

  - name: Install APT HTTPS transport.
    apt:
      name: "apt-transport-https"
      state: present
      update_cache: yes
    when: not apt_https_transport.stat.exists

  - name: "Install java version {{ Ubuntu_JDK8 }} for {{ playbookname }} on {{ ansible_os_family }}"
    apt:
      name: "{{ Ubuntu_JDK8 }}"
      state: present

  - name: Find java bin installation directory.
    shell: find / -name java|grep open|grep -v jre
    register: javabindir

  - name: "Create the java symbolic link for {{ playbookname }} on Ubuntu."
    file:
      src: "{{ javabindir.stdout }}"
      dest: /usr/lib/jvm/jre/bin/java
      owner: "{{ playbookname }}"
      group: "{{ playbookname }}"
      state: link

  when: ansible_os_family  == 'Debian' and playbookname == 'tomcat8'

# Install Open JDK8 on RedHat systems

- name: Install java and Tomcat8 on RedHat
  block:

  - name: "Install java version {{ RedHat_JDK8 }} for {{ playbookname }} on {{ ansible_os_family }}"
    yum:
      name: "{{ RedHat_JDK8 }}"
      state: present

  - name: Find java bin installation directory.
    shell: find / -name java|grep open|grep -v jre
    register: javabindir

  - name: "Create the java symbolic link for {{ playbookname }} on RedHat."
    file:
      src: "{{ javabindir.stdout }}"
      dest: /usr/lib/jvm/jre/bin/java
      owner: "{{ playbookname }}"
      group: "{{ playbookname }}"
      state: link

  when: ansible_os_family == 'RedHat' and playbookname == 'tomcat8'

# Install Tomcat8 on either Ubuntu or RedHat; OS type doesn't matter.

- name: "Install tomcat8 into /var/lib/tomcat8"
  unarchive:
    src: files/apache-tomcat-8.5.39.tar.gz
    dest: /var/lib/tomcat8/
    creates: "/var/lib/{{ playbookname }}/bin"
    extra_opts: [--strip-components=1]
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
  when: playbookname == 'tomcat8'

# Install both Open JDK11 and Tomcat9 on Ubuntu or RedHat; OS type doesn't matter.

- name: Set up preliminaries for installation of tomcat8 onto Ubuntu.
  block:

   - name: "Install java version {{ java_JDK11 }} in RedHat"
     yum:
       name: "{{ java_JDK11 }}"
       state: present
     when: ansible_os_family  == 'RedHat' and playbookname == 'tomcat9'

   - name: "Install java version {{ Ubuntu_JDK11 }} in Debian"
     apt:
       name: "{{ Ubuntu_JDK11 }}"
       state: present
     when: ansible_os_family  == 'Debian' and playbookname == 'tomcat9'

   - name: Find java bin installation directory.
     shell: find / -name java|grep open|grep -v jre
     register: javabindir

   - name: Create a symbolic link
     file:
       src: "{{ javabindir.stdout }}"
       dest: /usr/lib/jvm/jre/bin/java
       owner: "{{ playbookname }}"
       group: "{{ playbookname }}"
       state: link

   - name: "Install tomcat9 into /var/lib/tomcat9"
     unarchive:
       src: files/apache-tomcat-9.0.41.tar.gz
       dest: /var/lib/tomcat9/
       creates: "/var/lib/{{ playbookname }}/bin"
       extra_opts: [--strip-components=1]
       owner: "{{ playbookname }}"
       group: "{{ playbookname }}"

  when: playbookname == 'tomcat9'

# The remainder of the plays can be run unconditionally from OS version and software version.
# -------------------------------------------------------------------------------------------

# Make sure the entire /var/lib/tomcatx directory structure is owned recurresively by tomcatx.

- name: "Change folder permissions on /var/lib/{{ playbookname }} recursively"
  file: 
    path: /var/lib/{{ playbookname }} 
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    mode: 0775 
    state: directory 
    recurse: yes

# Find the path where Java is installed and put the local policy and US Export Policy jar files there.

- name: Find security folder
  raw: "find /usr -name blacklisted.certs|sed 's/blacklisted.certs//g'"
  register: security

- name: "Installing the local policy jar for java"
  copy:
    src: "files/{{ src_policy_jar }}"
    dest: "{{ security.stdout }}/"

- name: "Installing the US Export Policy jar for java"
  copy:
    src: "files/{{ src_us_export_policy }}"
    dest: "{{ security.stdout }}/"

# Create the jenkins group if it doesn't already exist.

- name: "Ensure jenkins_user group exists, if not create it"
  group:
    name: "{{ jenkins_user}}"
    state: present

# Create the jenkins user if it doesn't already exist.

- name: "Ensure the jenkins user exists, if not create it"
  user:
    name: "{{ jenkins_user }}"
    shell: /bin/bash
    group: "{{ jenkins_user}}"
    groups: "{{ jenkins_user}}"
    append: yes
    home: "/home/{{ jenkins_user }}"
    state: present

# Add the jenkins user to the appropriate sudo group based on OS type.

- name: "Add user jenkins to sudo group"
  shell: "usermod -a -G sudo jenkins"
  when: ansible_os_family == 'Debian'

- name: "Add user jenkins to sudo group"
  shell: "usermod -a -G wheel jenkins"
  when: ansible_os_family == 'RedHat'

- name: "Add user Ansible to {{ playbookname }} group"
  shell: "usermod -a -G {{ playbookname }} ansible"  

# Tomcat 8- Copy the appropriate environmental server.xml and context.xml files into the /var/lib/tomcatx/conf directory.
- name: Set up preliminaries for installation of tomcat8 onto Ubuntu.
  block:
    - name: "Install the {{ env }} server.xml file into /var/lib/{{ playbookname }}/conf directory."
      copy:
        src: "files/{{ env }}/{{ env }}.server.xml"
        dest: "/var/lib/{{ playbookname }}/conf/server.xml"
        owner: "{{ playbookname }}"
        group: "{{ playbookname }}"
        mode: 0600

    - name: "Install the {{ env }} context.xml file into /var/lib/{{ playbookname }}/conf directory."
      copy:
        src: "files/{{ env }}/{{ env }}.context.xml"
        dest: "/var/lib/{{ playbookname }}/conf/context.xml"
        owner: "{{ playbookname }}"
        group: "{{ playbookname }}"
        mode: 0600
  when: playbookname == 'tomcat8'

# Tomcat 9- Copy the appropriate environmental server.xml and context.xml files into the /var/lib/tomcatx/conf directory.
- name: Set up preliminaries for installation of tomcat8 onto Ubuntu.
  block:
    - name: "Install the server.xml file into /var/lib/{{ playbookname }}/conf directory."
      copy:
        src: "files/{{ playbookname }}/server.xml"
        dest: "/var/lib/{{ playbookname }}/conf/server.xml"
        owner: "{{ playbookname }}"
        group: "{{ playbookname }}"
        mode: 0600

    # - name: "Install the {{ env }} context.xml file into /var/lib/{{ playbookname }}/conf directory."
    #   copy:
    #     src: "files/{{ env }}/{{ env }}.context.xml"
    #     dest: "/var/lib/{{ playbookname }}/conf/context.xml"
    #     owner: "{{ playbookname }}"
    #     group: "{{ playbookname }}"
    #     mode: 0600
  when: playbookname == 'tomcat9'
# Installs the 4 requires sqljdbc libarires for our JNDI connections to work under /var/lib/tomcatx/lib directory.

- name: "Install the 4 requires sqljdbc libarires for our JNDI connections to work under /var/lib/{{ playbookname }}/lib"
  unarchive:
   src: "files/{{ src_jdbclibrariesxml }}"
   dest: "/var/lib/{{ playbookname }}/lib"
   owner: "{{ playbookname }}"
   group: "{{ playbookname }}"
   mode: 0640
  when: playbookname == 'tomcat8'

# This play will generate an error if App Dynamics is not installed and it will be ignored on purpose.

- name: Check if app dynamics is installed
  shell: systemctl status|grep -v grep|grep "appd-machine"|wc -l|awk '{print $1}'
  register: appd_result

# Copy the appropriate environmental setenv.sh file into the /var/lib/tomcatx/bin directory when App Dynamics is not installed.

- name: "Install the {{ env }} no-appd-installed setenv.sh file under /var/lib/{{ playbookname }}/bin directory"
  copy:
    src: "files/{{ env }}/{{ env }}.{{ playbookname }}.noappdsetenv.sh"
    dest: "/var/lib/{{ playbookname }}/bin/setenv.sh"
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    mode: 0760
  when: appd_result.stdout == '0'

# Copy the appropriate environmental setenv.sh file into the /var/lib/tomcatx/bin directory when App Dynamics is installed.

- name: "Install the {{ env }} yes-appd-installed setenv.sh file under /var/lib/{{ playbookname }}/bin directory"
  copy:
    src: "files/{{ env }}/{{ env }}.{{ playbookname }}.yesappdsetenv.sh"
    dest: "/var/lib/{{ playbookname }}/bin/setenv.sh"
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    mode: 0760
  when: appd_result.stdout == '1'

# Enable port 61000 on the remote host based on OS type.

- name: Enable port 61000 for tomcat communications in UFW
  ufw:
   rule: allow
   port: '61000'
   proto: tcp
  when: ansible_os_family == 'Debian'

- name: "Enable port 61000 for tomcat communicatinos in firewalld"
  firewalld:
    port: 61000/tcp
    zone: public
    permanent: yes
    state: enabled
  when: ansible_os_family == 'RedHat'

# Reload the firewall daemon on RedHat systems.

- name: "Reload firewalld to enable the public zone addition of 61000/tcp"
  service:
    name: firewalld
    state: reloaded
  when: ansible_os_family == 'RedHat'

# Install the appropriate systemctl service file based on Tomcat version.

- name: "Install the {{ playbookname }} systemctl service file"
  copy:
    src: "files/{{ playbookname }}/{{ tomcat8_src_tcsystemdxml }}"
    dest: "/etc/systemd/system/{{ playbookname }}.service"
    owner: root
    group: root
    mode: 0755
  when: playbookname == 'tomcat8'

- name: "Install the {{ playbookname }} systemctl service file"
  copy:
    src: "files/{{ playbookname }}/{{ tomcat9_src_tcsystemdxml }}"
    dest: "/etc/systemd/system/{{ playbookname }}.service"
    owner: root
    group: root
    mode: 0755
  when: playbookname == 'tomcat9'
  #and ansible_os_family == 'RedHat'

# Enable the tomcatx service.

- name: "Enable the {{ playbookname }} service"
  ignore_errors: True
  service:
    name: "{{ playbookname }}.service"
    enabled: yes

# Ensure the /var/lib/tomcatx/webapps dir is mode 0770 so jenkins can deploy and manage apps there.

- name: "Ensure the /var/lib/{{ playbookname }}/webapps dir is mode 0770 so jenkins can deploy and manage apps there"
  file:
    path: "/var/lib/{{ playbookname }}/webapps"
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    state: directory
    mode: 0770

# Set up the ntp daemon on the appropriate OS platform.

- name: Setting up ntp on RedHat
  block:

  - name: "Installing ntp daemon"
    yum:
      name: ntp

  - name: "Setup ntp"
    template:
      src: files/ntp.conf
      dest: /etc/ntp.conf
      mode: 0644

  - name: "Ensure ntpd is running and enabled"
    service:
      name: ntpd
      state: restarted
      enabled: yes

  when: ansible_os_family  == 'RedHat'

- name: Setting up ntp on Ubuntu
  block:

  - name: Install ntp on Ubuntu
    apt:
      name: ntp
      state: present

  - name: "Setup ntp"
    template:
      src: files/ntp.conf
      dest: /etc/ntp.conf
      mode: 0644

  - name: "Ensure ntpd is running and enabled"
    service:
      name: ntp
      state: restarted
      enabled: yes

  when: ansible_os_family  == 'Debian'

# Updating log4j for tomcat

- name: "Download jar file {{ playbookname }}"
  copy:
    src: log4j-jndi-be-gone-1.0.0-standalone.jar
    dest: "/var/lib/{{ playbookname }}/lib"
    owner: "{{ playbookname }}"
    group: "{{ playbookname }}"
    mode: '0755'

- name: "Add a line in setenv.sh for {{ playbookname }}"
  lineinfile:
    path: "/var/lib/{{ playbookname }}/bin/setenv.sh"
    line: 'JAVA_OPTS="${JAVA_OPTS} -Dlog4j2.formatMsgNoLookups=true"'   
  
- name: "Add a line in setenv.sh for {{ playbookname }}"
  lineinfile:
    path: "/var/lib/{{ playbookname }}/bin/setenv.sh"
    line: 'JAVA_OPTS="${JAVA_OPTS} -javaagent:/var/lib/{{ playbookname }}/lib/log4j-jndi-be-gone-1.0.0-standalone.jar"'

# Fire up Tomcat.

- name: "Ensure {{ playbookname }} is running and enabled"
  service:
    name: "{{ playbookname }}"
    state: restarted
    enabled: yes

# Copy the TC Native libraries to the /var/lib/tomcat9/lib directory when Tomcat9 is being installed.

- name: Perform steps associated to just tomcat9 installation
  block:

    - name: Copy libtcnative-1.a file
      copy:
        src: files/libtcnative-1.a
        dest: /var/lib/tomcat9/lib/libtcnative-1.a
        owner: tomcat9
        group: tomcat9
        mode: 777

    - name: Copy libtcnative-1.la file
      copy:
        src: files/libtcnative-1.la
        dest: /var/lib/tomcat9/lib/libtcnative-1.la
        owner: tomcat9
        group: tomcat9
        mode: 777

    - name: Copy libtcnative-1.so.0.2.25 file
      copy:
        src: files/libtcnative-1.so.0.2.25
        dest: /var/lib/tomcat9/lib/libtcnative-1.so.0.2.25
        owner: tomcat9
        group: tomcat9
        mode: 777

    - name: Create a symbolic link for libtcnative-1.so
      file:
        src: /var/lib/tomcat9/lib/libtcnative-1.so.0.2.25
        dest: /var/lib/tomcat9/lib/libtcnative-1.so
        owner: tomcat9
        group: tomcat9
        state: link

    - name: Create a symbolic link for libtcnative-1.so.0
      file:
        src: /var/lib/tomcat9/lib/libtcnative-1.so.0.2.25
        dest: /var/lib/tomcat9/lib/libtcnative-1.so.0
        owner: tomcat9
        group: tomcat9
        state: link
  when: playbookname == 'tomcat9'
